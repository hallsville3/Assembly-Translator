#Prime Sieve

main:
    movq $0, %rax
    movq $1000000, %r11
    push_loop:
        pushq $2
        incq %rax
        cmpq %r11, %rax
        jl push_loop

    movq %rsp, %rdi
    movq $1, %rsi
    #Now, rdi contains the beginning of a 1000 element array to hold the primes
    #rsi contains how many primes are in the array
    movq $3, %rdx
    sieve:
        pushq %rdx
        callq get_next_prime
        popq %rdx

        cmpq $0, %rax
        jne next_sieve

        pushq %rsi
        movq %rdx, %rsi
        callq printf
        popq %rsi

        movq %rdx, (%rdi, %rsi)
        incq %rsi

        next_sieve:
        incq %rdx
        cmpq %r11, %rsi
        jl sieve

    movq $0, %rax
    pop_loop:
        popq %rsi
        incq %rax
        cmpq %r11, %rax
        jl pop_loop

    ret


get_next_prime:
    #A function that takes in an address of an array, and an index, and a number to check
    #Check all the primes less than sqrt number
    movq $0, %r8
    movq %rdi, %rcx
    movq %rdx, %r10
    prime_loop:
        movq (%rcx), %r9
        movq %r9, %rbx
        imulq %rbx, %rbx
        cmpq %r10, %rbx
        jg prime
        subq $1, %rcx
        movq %r10, %rax
        idivq %r9
        #Now rdx contains the remainder
        cmpq $0, %rdx
        jne continue
        movq $1, %rax
        ret
        continue:
        incq %r8
        cmpq %rsi, %r8
        jl prime_loop

    prime:
    #if we get here it is prime
    movq $0, %rax
    ret